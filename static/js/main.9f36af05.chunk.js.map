{"version":3,"sources":["img/m_m.png","components/CircleRow.js","components/Header.js","components/Background.js","components/Body.js","App.js","components/Footer.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CircleRow","react_default","a","createElement","className","Component","Header","components_CircleRow","Background","src","require","alt","components_Background","Text","App","components_Header","Body","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4KCmBzBC,sMAdX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAVHC,cCWTC,mLARX,OACIL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAACI,EAAD,cAJSF,aCSNG,gMARX,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,EAAQ,IAAmBC,IAAI,aAJ5BN,sBCqBVC,mLAjBX,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACS,EAAD,MACAX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMT,UAAU,cACZH,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMT,UAAU,QAAhB,oBACe,KADf,sCAE8B,KAAM,MAHxC,aAKe,KALf,gBAMkB,KANlB,aAOe,cAZNC,aCYNS,SCbMT,6LDIjB,OACEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAACa,EAAD,cALQX,cEMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9f36af05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/m_m.2b7ed560.png\";","import React, { Component } from 'react';\nimport '../styles/circleRow.scss';\n\nclass CircleRow extends Component {\n  render() {\n    return (\n        <div className=\"circle-row\">\n            <div className=\"circle red\"></div>\n            <div className=\"circle orange\"></div>\n            <div className=\"circle yellow\"></div>\n            <div className=\"circle green\"></div>\n            <div className=\"circle blue\"></div>\n            <div className=\"circle purple\"></div>\n            <div className=\"circle pink\"></div>\n        </div>\n    );\n  }\n}\n\nexport default CircleRow;\n","import React, { Component } from 'react';\nimport '../styles/header.scss';\nimport CircleRow from './CircleRow.js';\n\nclass Header extends Component {\n  render() {\n    return (\n        <header className=\"App-header\">\n            <CircleRow/>\n        </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport '../styles/background.scss';\n\nclass Background extends Component {\n  render() {\n    return (\n        <div className=\"background\">\n            <img src={require(\"../img/m_m.png\")} alt=''/>\n        </div>\n    );\n  }\n}\n\nexport default Background;\n","import React, { Component } from 'react';\nimport '../styles/body.scss';\nimport Background from './Background.js';\nimport {Text } from 'react-native';\n\nclass Header extends Component {\n  render() {\n    return (\n        <div className=\"App-body\">\n            <Background/>\n            <Text className=\"bread-text\">\n                <Text className=\"bold\">\n                VÄLKOMMEN TILL{'\\n'}\n                MICHAELA OCH MÅRTENS BRÖLLOP!{'\\n'}{'\\n'}\n                </Text>\n                05.09.2020{'\\n'}\n                Stuvstakyrkan{'\\n'}\n                Ekeby loge{'\\n'}\n                </Text>\n        </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './styles/App.scss';\nimport Header from './components/Header.js';\nimport Body from './components/Body.js';\nimport Footer from './components/Footer.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Header/>\n          <Body/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport '../styles/footer.scss';\nimport Background from './Background.js';\n\nclass Header extends Component {\n  render() {\n    return (\n        <footer className=\"App-footer\">\n        </footer>\n    );\n  }\n}\n\nexport default Header;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}